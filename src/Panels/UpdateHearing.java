/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Panels;

import JISS.Case;
import java.sql.Date;
import JISS.Main;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sandesh
 */
public class UpdateHearing extends javax.swing.JPanel {

    /**
     * Creates new form UpdateHearing
     */
    public UpdateHearing() {
        initComponents();
        _cref = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b_close = new javax.swing.JButton();
        b_back = new javax.swing.JButton();
        l_heading = new javax.swing.JLabel();
        l_hn = new javax.swing.JLabel();
        l_doh = new javax.swing.JLabel();
        l_roh = new javax.swing.JLabel();
        l_soh = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_soh = new javax.swing.JTextArea();
        l_roa = new javax.swing.JLabel();
        sp_roa = new javax.swing.JScrollPane();
        ta_roa = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        b_snh = new javax.swing.JButton();
        b_done = new javax.swing.JButton();
        l_snh = new javax.swing.JLabel();

        b_close.setText("x");
        b_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_closeActionPerformed(evt);
            }
        });

        b_back.setText("<");
        b_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_backActionPerformed(evt);
            }
        });

        l_heading.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        l_heading.setForeground(new java.awt.Color(51, 153, 255));
        l_heading.setText("Heading");

        l_hn.setText("Hearing No : ");

        l_doh.setText("Date of Hearing : ");

        l_roh.setText("Result of Hearing : ");

        l_soh.setText("Summary of Hearing : ");

        ta_soh.setColumns(20);
        ta_soh.setRows(5);
        jScrollPane1.setViewportView(ta_soh);

        l_roa.setText("Reason for Adjournment : ");

        ta_roa.setColumns(20);
        ta_roa.setRows(5);
        sp_roa.setViewportView(ta_roa);

        jLabel7.setText("Schedule Next Hearing : ");

        b_snh.setText("Schedule Hearing");
        b_snh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_snhActionPerformed(evt);
            }
        });

        b_done.setText("Done");
        b_done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_doneActionPerformed(evt);
            }
        });

        l_snh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(l_heading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_close))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(l_doh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(l_hn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(l_roh, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(l_roa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(l_soh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b_snh, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(l_snh, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(b_done, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sp_roa)
                            .addComponent(jScrollPane1))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_close)
                    .addComponent(b_back)
                    .addComponent(l_heading, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(l_hn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l_doh, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l_roh, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(l_soh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sp_roa)
                    .addComponent(l_roa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b_done, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(b_snh, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(l_snh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void b_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_backActionPerformed
        // TODO add your handling code here:
        if(l_snh.getText().equals(_csdone)) {
            JOptionPane.showMessageDialog(rapplet._mv_p, "Operation not allowed .\nCase Hearing has been scheduled .");
            return;
        }
        rapplet.reset();
        rapplet._mainview.show(rapplet._mv_p, _prev);
    }//GEN-LAST:event_b_backActionPerformed

    private void b_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_closeActionPerformed
        // TODO add your handling code here:
        if(l_snh.getText().equals(_csdone)) {
            JOptionPane.showMessageDialog(rapplet._mv_p, "Operation not allowed .\nCase Hearing has been scheduled .");
            return;
        }
        rapplet.reset();
        rapplet._mainview.show(rapplet._mv_p, Main.M_REGVIEW);
    }//GEN-LAST:event_b_closeActionPerformed

    private void b_snhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_snhActionPerformed
        // TODO add your handling code here:
        if(l_snh.getText().equals(_cspend)){
            rapplet._slotview.upSlots();
            rapplet._slotview.setPrev(Main.M_UPDATEH);
            rapplet._slotview.setMode(SlotView.M_NH);
            rapplet.reset();
            rapplet._mainview.show(rapplet._mv_p, Main.M_SLOTVIEW);
        }else JOptionPane.showMessageDialog(rapplet._mv_p, "Next Hearing has already been Scheduled.");
    }//GEN-LAST:event_b_snhActionPerformed

    private void b_doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_doneActionPerformed
        // TODO add your handling code here:
        int _thn = (_cref.getNoH()-2) ;
        if(_mode==M_ASC) _thn++;
        if(!check()) { JOptionPane.showMessageDialog(rapplet._mv_p, "Please enter the details.");  return ; }
        if(_mode==M_ASC || l_snh.getText()==_csdone){
            if (_mode == M_AA) {
                try {
                    _cref.updateHearingSummary(_thn, getSoH(_thn));
                    _cref.updateHearingReason(_thn, getRoR(_thn));
                } catch (Exception ex) {
                    System.err.println(ex.getMessage());
                }
            } else if (_mode == M_ASC) {
                try {
                    _cref.updateHearingSummary(_thn, getSoH(_thn));
                    _cref.setCaseSummary(getRoR(_thn));
                    _cref.setED(_cref.getHearing(_thn).getDoH());
                    _cref.setStatus(Case.CASE_CLOSED);
                } catch (Exception ex) {
                    System.err.println(ex.getMessage());
                }
            } else if (_mode == M_ASP) {
                try {
                    _cref.updateHearingSummary(_thn, getSoH(_thn));
                } catch (Exception ex) {
                    System.err.println(ex.getMessage());
                }
            }
            _cref.updateHearingResult(_thn, getRoH());
            JOptionPane.showMessageDialog(rapplet._mv_p, "Update Successful");
            rapplet.reset();
            rapplet._mainview.show(rapplet._mv_p, Main.M_REGVIEW);
        }else{
            JOptionPane.showMessageDialog(rapplet._mv_p, "Next Hearing not yet scheduled");
        }
    }//GEN-LAST:event_b_doneActionPerformed
    
    Case _cref ;
    
    private Main rapplet;
    
    public final static int M_ASP = 3;
    public final static int M_ASC = 4;
    public final static int M_AA = 5;
    
    public final static String R_CLOSED = "CLOSED";
    public final static String R_SUCCESS = "SUCCESS";
    public final static String R_ADJOURNED = "ADJOURNED";
    
    public void setRA(Main _ra) {
        rapplet = _ra;
    }
    
    private String _prev;
    
    public void setPrev(String _prev_i){
        _prev = _prev_i ;
    }
    
    private int _mode ;
    
    public void setMode(int _m){
        _mode = _m ;
    }
    
    public boolean check(){
        if(ta_soh.getText().equals("")) return false;
        if(_mode==M_AA){
            if(ta_roa.getText().equals("")) return false;
        }
        if(_mode!=M_ASC) if(l_snh.getText().equals(_cspend)) return false;
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_back;
    private javax.swing.JButton b_close;
    private javax.swing.JButton b_done;
    private javax.swing.JButton b_snh;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l_doh;
    private javax.swing.JLabel l_heading;
    private javax.swing.JLabel l_hn;
    private javax.swing.JLabel l_roa;
    private javax.swing.JLabel l_roh;
    private javax.swing.JLabel l_snh;
    private javax.swing.JLabel l_soh;
    private javax.swing.JScrollPane sp_roa;
    private javax.swing.JTextArea ta_roa;
    private javax.swing.JTextArea ta_soh;
    // End of variables declaration//GEN-END:variables
    
    public void setHeading(String _str){
        l_heading.setText(_str);
    }
    
    public void setHN(int _hn){
        l_hn.setText("Hearing No : "+Integer.toString(_hn));
    }
    
    public void setDoH(Date _doh){
        l_doh.setText("Date of Hearing : "+_doh.toString());
    }

    public void setRoH(String result) throws Exception{
        l_roh.setText("Result of Hearing : "+ result);
    }
    
    public String getRoH(){
        try{
            if(l_roh.getText().contains(R_ADJOURNED)) return R_ADJOURNED;
            else if(l_roh.getText().contains(R_CLOSED)) return R_CLOSED;
            else if(l_roh.getText().contains(R_SUCCESS)) return R_SUCCESS;
            else throw new Exception();
        }catch(Exception ex){
            System.err.println("Error : in UpdateHearing _ getRoH() , invalid case result type.");
        }
        return null;
    }
    
    public String getSoH(int _hn) throws Exception{
        if(l_hn.getText().substring(13).equals(Integer.toString(_hn))){
            return ta_soh.getText();
        }else throw new Exception("Error : Hearing numbers not matching");
    }

    public String getRoR(int _hn) throws Exception{
        if(l_hn.getText().substring(13).equals(Integer.toString(_hn))){
            return ta_roa.getText();
        }else throw new Exception("Error : Hearing numbers not matching");
    }
    
    public void populateInfo(Case _ref){
        _cref = _ref;
        int _thn = (_ref.getNoH()-1) ;
        setHN(_thn);
        setDoH(_ref.getHearing(_thn).getDoH());
        
        ta_roa.setText("");
        ta_soh.setText("");
        
        if(_mode == M_AA) {
            try {
                l_roa.setText("Reason for Adjournment : ");
                setHeading("Update : Adjourned Case Hearing");
                setRoH(R_ADJOURNED);
                ta_roa.setEditable(true);
                l_roa.setEnabled(true);
                b_snh.setEnabled(true);
                setLSnh(_cspend);
            } catch (Exception ex) {
                Logger.getLogger(UpdateHearing.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(_mode == M_ASC) {
            try {
                l_roa.setText("Summary of Hearing : ");
                setHeading("Update : Case Closed");
                setRoH(R_CLOSED);
                ta_roa.setEditable(true);
                l_roa.setEnabled(true);
                b_snh.setEnabled(false);
                setLSnh("");
            } catch (Exception ex) {
                Logger.getLogger(UpdateHearing.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if(_mode==M_ASP){
            try {
                setHeading("Update : Case Hearing");
                setRoH(R_SUCCESS);
                ta_roa.setEditable(false);
                l_roa.setEnabled(false);
                b_snh.setEnabled(true);
                setLSnh(_cspend);
            } catch (Exception ex) {
                Logger.getLogger(UpdateHearing.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public static final String _cspend = "Hearing Unscheduled";
    public static final String _csdone = "Hearing Scheduled";
    
    public void setLSnh(String _st){
        l_snh.setText(_st);
    }
    
}
